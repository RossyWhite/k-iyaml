#!/usr/bin/env bash

set -eo pipefail

PROGNAME="kubectl iyaml"
_KUBECTL_IYAML_VERSION="0.0.2"

show_usage() {
  cat <<_EOS_ 1>&2
Usage: $PROGNAME [OPTIONS...] <resource> <query>
OPTIONS:
  -h, --help               Show help for '$PROGNAME'
  -n, --namespace string   The name of namespace to use
  --context string         The name of kubeconfig context to use
Examples: 
  $PROGNAME deployment -n kube-system --context my-cluster
  $PROGNAME service api -n default
_EOS_
}

prompt_help () {
  printf "See '$PROGNAME --help' for usage.\n"
}

iyaml() {
  kind="$1"; kcmd="kubectl get $1"; shift
  qry="$@"

  if [[ -v OPT_NS ]]; then kcmd+=" -n $OPT_NS"; else kcmd+=" -A"; fi
  if [[ -v OPT_CTX ]]; then kcmd+=" --context $OPT_CTX"; fi

  kcmd+=" -o custom-columns=Namespace:.metadata.namespace,NAME:.metadata.name"
  read ns rs < <(eval $kcmd | fzf --header-lines=1 --ansi --exit-0 --query "$qry" --prompt "$kind: ")
  ctx=${OPT_CTX-$(kubectl config current-context)}
  kubectl get "$kind" "$rs" -n "$ns" --context "$ctx" -o yaml | yh | less
}

declare -i argc=0
declare -a argv=()
while (( $# > 0 )); do
  case "$1" in
    -h | --help)
      show_usage
      exit 1
      ;;
    --version)
      echo ${_KUBECTL_IYAML_VERSION}
      exit 1
      ;;
    -n | --namespace* )
      if [[ "$1" =~ = ]]; then OPT_NS="${1#*=}"; else OPT_NS="$2" && shift; fi
      ;;
    --context* )
      if [[ "$1" =~ = ]]; then OPT_CTX="${1#*=}"; else OPT_CTX="$2" && shift; fi
      ;;
    -* | --* )
      printf "Error: unknown flag: $1\n"
      prompt_help
      exit 1
      ;;
    * )
      argc+=1
      argv+=("$1")
      ;;
  esac
  shift
done

if [[ ${argc} -lt 1 ]]; then
  rtype=$(kubectl api-resources --verbs=list,get -o name | fzf --prompt "Select Resource Type: ")

  if [[ -z "$rtype" ]]; then
    exit 1
  fi
  argv+=("$rtype")
fi

iyaml "${argv[@]}"
